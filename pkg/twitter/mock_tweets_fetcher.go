// Code generated by mockery. DO NOT EDIT.

package twitter

import (
	context "context"

	logger "github.com/kordape/ottct-poller-service/pkg/logger"
	mock "github.com/stretchr/testify/mock"
)

// MockTweetsFetcher is an autogenerated mock type for the TweetsFetcher type
type MockTweetsFetcher struct {
	mock.Mock
}

// FetchTweets provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockTweetsFetcher) FetchTweets(_a0 context.Context, _a1 logger.Interface, _a2 FetchTweetsRequest) (FetchTweetsResponse, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 FetchTweetsResponse
	if rf, ok := ret.Get(0).(func(context.Context, logger.Interface, FetchTweetsRequest) FetchTweetsResponse); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(FetchTweetsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, logger.Interface, FetchTweetsRequest) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewMockTweetsFetcherT interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTweetsFetcher creates a new instance of MockTweetsFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTweetsFetcher(t NewMockTweetsFetcherT) *MockTweetsFetcher {
	mock := &MockTweetsFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
